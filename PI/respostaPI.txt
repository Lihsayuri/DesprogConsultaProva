Questão 1
---------

7 = (0+15)/2
3 = (0+6)/2
5 = (4+6)/2
6 = (6+6)/2



Questão 2
---------

bubble sort
2  4  6  0  8
2  4  0  6  8
2  0  4  6  8
0  2  4  6  8

selection sort
0  2  4  6  8
0  2  4  6  8
0  2  4  6  8
0  2  4  6  8

insertion sort
2  8  4  6  0
2  4  8  6  0
2  4  6  8  0
0  2  4  6  8



Questão 3a
----------

combine
i = 1, j = 3
i = 2, j = 3
i = 2, j = 4
i = 3, j = 4
i = 3, j = 5
i = 3, j = 6



Questão 3b
----------

partition
p = 0, v = 6  8  2  3  1  4
p = 0, v = 6  8  2  3  1  4
p = 1, v = 2  8  6  3  1  4
p = 2, v = 2  3  6  8  1  4
p = 3, v = 2  3  1  8  6  4



Questão 4
---------

Quantidade de iterações do loop externo (x):
-------------------------------------------
Contador começa de 1 e multiplica por 2 enquanto for menor que n. (i = 1* 2^k para k iterações)

Depois de x-1 iterações, a condição ainda vale.
2^(x-1) < n
log2(2^(x-1)) < log2(n)
x-1 < log2(n)
x < log2(n) + 1

Depois de x iterações, a condição não vale.
2^x >= n
log2(2^x) >= log2(n)
x >= log2(n)

Portanto: log2(n) <= x < log2(n) + 1


Quantidade de iterações do loop interno (y):
-------------------------------------------
Contador começa de i e divide por 4 enquanto for maior que 3. (j = i/(4^k) para k iterações)

Depois de y-1 iterações, a condição ainda vale.
i/(4^(y-1)) > 3
i > 3* 4^(y-1)
i/3 > 4^(y-1)
log4(i/3) > log4(4^(y-1))
log4(i/3) > y-1
log4(i/3) + 1 > y
y < log4(i/3) + 1


Valor de i ao longo do loop externo:
-----------------------------------
i = 1, 2, 4, 8, 16, 32 ..., 1 * 2^(x-1)

Limitante para as iterações de todas as execuções do loop interno:
-----------------------------------------------------------------

(log4(1/3) + 1) + (log4(2/3) + 1) + (log4(4/3) + 1) + (log4(8/3) + 1) + ... + (log4(2^(x-1)/3) + 1)
(log4(1) - log4(3) + 1) + (log4(2) - log4(3) + 1) + (log4(4) - log4(3) + 1) + (log4(8) - log4(3) + 1) + ... + (log4(2^(x-1)) - log4(3) + 1)
(log4(1) + log4(2) + log4(4) + log4(8) + ... + log4(2^(x-1))) - x*log4(3) + x
(log4(2^0) + log4(2^1) + log4(2^2) + log4(2^3) + ... + log4(2^(x-1))) - x*log4(3) + x
(0*log4(2) + 1*log4(2) + 2*log4(2) + 3*log4(2) + ... + (x-1)*log4(2)) - x*log4(3) + x
(0 + 1 + 2 + 3 + ... + (x-1))*log4(2) - x*log4(3) + x

Primeiro parênteses é soma de PA com:
- primiro elemento = 0;
- último elemento = x-1;
- número de elementos = x.

= ((0 + (x-1))*(x/2)) * log4(2) - x*log4(3) + x
= ((x-1)*(x/2)) * log4(2) - x*log4(3) + x
= ((x^2 - x)/2) * log4(2) - x*log4(3) + x

Como log2(n) <= x < log2(n) + 1, podemos concluir que a complexidade é O((log n)^2).



Questão 5
---------

*Escreva a resposta aqui, no mesmo formato da Lista de Complexidade.*

         /
        | 1             se n <= 5;
f(n) = <
        | f(n/5) + n    se n > 5.
         \


[A árvore está no drawio e também fiz à mão]


Tamanho n divide por 5 a cada andar enquanto for maior que 5.
No antepenúltimo andar (h-2), ainda não chegamos na base.

n/(5^(h-2)) > 5
n > 5 * 5^(h-2)
n/5 > 5^(h-2)
log5(n/5) > log5(5^(h-2))
log5(n/5) > h - 2
log5(n/5) + 2 > h
h < log5(n/5) + 2

Ao longo dos andares, temos:
(n + n/5 + n/25 + n/125 + ... + n/(5^(h-2))) + 1

O parênteses é uma soma de PG em que q < 1, com:
- primeiro elemento n;
- razão 1/5;
- número de elementos h-1.

< (n/(1 - 1/5)) + 1
= (n/(4/5)) + 1
= (5n/4) + 1

Logo, a complexidade é O(n).



Questão 6
---------

Quantidade de iterações do loop externo (x):
-------------------------------------------
Contador começa em n e subtrai 2 enquanto i for maior que 4. (i = n - 2*k para k iterações)

Depois de x-1 iterações, a condição ainda vale.
n - 2*(x-1) > 4
n - 2*x + 2 > 4
-2*x > 2 - n
x < (n - 2)/2

Depois de x iterações, a condição não vale.
n - 2*x <= 4
-2*x <= 4 - n
x >= (n - 4)/2

Portanto: (n - 4)/2 <= x < (n - 2)/2

Quantidade de iterações do loop interno (y):
-------------------------------------------
Contador começa de 1 e multiplica por 3 enquanto j for menor que i. (j = 1*(3^k) para k iterações)

Depois de y-1 iterações, a condição ainda vale.
1*3^(y-1) < i
log3(3^(y-1)) < log3(i)
y-1 < log3(i)
y < log3(i) + 1

Valor de i ao longo do loop externo:
-----------------------------------
i = n, n-2, n-4, n-6, n-8, n-10 ..., n-2*(x-1)

Limitante para as iterações de todas as execuções do loop interno:
-----------------------------------------------------------------

(log3(n) + 1) + (log3(n-2) + 1) + (log3(n-4) + 1) + ... + (log3(n -2*x + 2) + 1)
(log3(n) + log3(n-2) + log3(n-4) + ... + log3(n -2*x +2)) + x

Primeiro parênteses é soma de logaritmos de PA.

= O(x*log(x)) + x

Como (n - 4)/2 <= x < (n - 2)/2, podemos concluir que a complexidade é O(n log n).



Questão 7
---------

Como a velocidade é importante, vamos considerar a recomendação de tempo na
prática. Como a quantidade de gatos exibidos na página é pequena, de apenas 25 gatos,
vamos especificamente considerar a recomendação para vetores pequenos.

Como a lista de gatos foi escolhida aleatoriamente, vamos considerar que inicialmente 
as notas estão sem ordem aparente. Como para calcular a adotabilidade de uma gato são 
necessários vários critérios, é exigido que o algoritmo tenha estabilidade.

Segundo essa recomendação o algoritmo indicado é o INSERTION SORT. 

Além disso, o INSERTION SORT não consome muita memória adicional, embora isso não 
tenha sido exigido pelo contexto.


Questão 8
---------

Como ter uma velocidade média alta é importante, vamos considerar a recomendação de tempo na
prática. Como há milhões de perfis, vamos especificamente considerar a recomendação para
vetores grandes.

Como as médias podem ser ordenadas por qualquer um dos critérios de beleza, simpatia, etc,
não há uma ordem inicial definida, o que permite considerar um vetor sem ordem aparente. Como 
é importante não estragar quaisquer ordenações anteriores que o usuário tenha feito, vamos 
considerar a estabilidade importante.

Segunda essa recomendação, o algoritmo indicado é o MERGE SORT. Isso porque, embora o QUICK 
SORT seja mais rápido para trabalhar com vetores grandes e sem ordem aparente, ele não é
estável, e esse é um critério que foi exigido pelo contexto.

Além disso, o MERGE SORT é o pior em consumo de memória adicional, mas o contexto não exigiu
nada relacionado à memória.